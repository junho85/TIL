= 스프링5 웹 플럭스와 테스트
https://if.kakao.com/2018/program?sessionId=1f944526-cf80-4b35-96bd-f871b4cb8456[스프링5 웹플럭스와 테스트 전략]
https://tv.kakao.com/channel/3150758/cliplink/391418995[영상]

* https://www.slideshare.net/ifkakao/5-113145589[스프링5 웹 플럭스와 테스트]

이일민 Epril

Gamehub
KSUG

== 대상
* 자바 8+ 개발자
* 스프링 5.x 개발자
* 스프링 기반 비동기/논블록킹 개발+
* Reactor, RxJava 기반 리액티브 프로그래밍+
* 스프링 웹 플럭스에 대한 경험 또는 지식이 있는 개발자

== 발표내용
* 뭘 (X)좋아하는지 알고 계신지 몰라서 여러가지를 준비했음

* 스프링 웹 플럭스? (feat. 스프링 MVC)
* 플럭스와 테스트
* 원격 리액티브 API 호출 테스트
* 웹 플럭스 서비스의 테스트
* 함수형 엔드포인트의 테스트

== 스프링 5 웹 플럭스와 테스트
스프링 MVC 망했나요?

== 스프링 웹 플럭스
* 스프링 5.0에 새로 등장한 웹 프레임워크 + 리액티브 스택
** SpringMVC 이후 15년 만에 처음으로
** SpringMVC와 두 개의 웹 기술 트랙
* 초기 이름은 스프링 웹 리액티브
** 플럭스 <-> 리액티브

== 스프링 웹 플럭스
* Spring Framework 5의 구조
image::file1.png[]

== 스프링 웹 플럭스 vs MVC
* 웹 스택에 Repository는 왜? JPA/JDBC는 어디로?
* (Flux가 포함된) Reactor 라이브러리가 왜 양쪽에?

* 스프링 웹 플럭스와 MVC가 공유하는 부분과 고유한 부분
image::file2.png[]

== 코드로 비교해보는 스프링 5 웹 플럭스와 테스트 vs 스프링 MVC

== 스프링 MVC - Hello API

== 스프링 웹 플럭스 - Hello API

image::file3.png[]

image::file4.png[]

== 스프링 MVC과 스프링 웹 플럭스는 대체 뭐가 다른가?
* 웹 플럭스의 @Controller 코드는 스프링MVC의 코드와 동일한 방식으로 작성 가능

image::file5.png[]

== 스프링 5 웹 플럭스와 테스트 언제, 왜?

== 스프링 웹 플럭스 도입 이유
* 100% (I/O, 데이터 처리) 논블록킹 개발
* 확장성과 고효율성이 매우 중요
* 업, 다운 스트리밍과 Back pressure가 필요
* 고속 서비스 오케스트레이션 개발
* 유사한 프로그래밍 모델의 경험
* 유연하게 커스터마이징이 가능한 웹 프레임워크 구성
* 본격적인 함수형 프로그래밍 모델 사용

== 스프링 웹 플럭스를 사용하지 않는 게 좋은 이유
* 웹 플럭스가 왜 필요한지 분명하게 모름
** 비동기/논블록킹 방식 도입(X)
** 리액티브 라이브러리(Reactor, RxJava) 사용 (X)
* 블록킹이 서버, 코드, 라이브러리에 존재
** 블록킹 IO, 블록킹 서블릿 필터
** JPA(X), JDBC(X)
** ADBA(O), AoJ(?), R2DBC(?)
* SpringMVC로 개발했더니 아무 문제 없음 (X)

== 스프링 웹 플럭스는 스프링 MVC로 시작해도 됨
* 스프링5 MVC는 웹 플럭스에서 제공되는 다양한 기능과 프로그래밍 모델 제공
** 비동기/논블록킹 API 호출
** 비동기/논블록킹 데이터 액세스
** 리액티브 데이터 조회, 전송
** 비동기 웹 요청 처리
** 서버 스트리밍
** 클라이언트 스트리밍
** Reactor(Flux, Mono), RxJava, Flow 등을 이용하는 코드
* MVC에서 WebClient 사용이 가장 좋은 출발점
** RestTemplate 대체

== 스프링 웹 플럭스 탐험
* 스프링 웹 플럭스를 꼭 쓸 이유도, 쓰지말아야 할 이유도 없는 유연한 중간지대에 있다면.

== 스프링5웹 플럭스와 테스트
리액티브 프로그래밍
비동기/논블록킹

=== 리액티브 (함수형) 프로그래밍
* 인터넷 시대에 복잡함을 해결하기 위해 - Eridk Meijier
* 연속적으로 일어나는 이벤트를 다루는 프로그래밍 기법

1. UI 이벤트, 비동기적인 I/O이벤트, 통제 불가능한 이벤트 스트림 처리
2. 동시성, 비동기/논블록킹 호출을 다루는데 탁월
3. 조합 가능한 비동기 로직을 다루는 함수형 프로그래밍

=== 비동기/논블록킹 API 호출 - 가장 단순한 리액티브
* 동기/블록킹 API 호출 - RestTemplate
** 장점: 쉽고 간단함
** 단점: IO 동안 블록킹
시스템 특성에 따라 매우 비효율적이 될 수도 ($로 해결)
* 비동기/논블록킹 API호출
** AsyncRestTemplate (Spring4)
** Async/Await (Java8+)
** WebClient (Spring5)
** 장점: 확장성이 뛰어나고 높은 처리율과 낮은 레이턴시를 가지는 효율적인 서버 구성이 가능할 수도 ($ 절약)
** 단점: 장점을 얻을 만한 경우가 많지 않음. 자칫하면 코드가 복잡하고 이해하기 어려움

=== 동기/블록킹 API 호출
[source,java]
----
public UserOrder orders(String email) {
  try {
    User user = findUserApi(email);
    List<Order> orders = getOpenOrders(user);
    return new UserOrder(email, orders);
  }
  catch (Exception e) {
    return UserOrder.FAIL;
  }
}
----

두번의 동기 API 호출 RestTemplate

=== 비동기/논블록킹 API 호출 - 콜백
[source,java]
----
public DeferredResult<UserOrder> asyncOrders(String email) {
  DeferredResult dr = new DeferredResult();

  asyncFindUserApi(email).addCallback(
    user->asyncOrdersApi(user).addCallback(
      orders -> {
        dr.setResult(new UserOrder(email, orders));
      },
      e->dr.setErrorResult(UserOrder.FAIL)),
    e->dr.setErrorResult(UserOrder>FAIL));
  return dr;
}
----

=== 비동기/논블록킹 API 호출 - CompletableFuture
[source,java]
----
public CompletableFuture<UserOrder> asyncOrders2(String email) {
  return asyncFindUser2(email)
    .thenCompose(user->asyncOrders2(user))
    .thenApply(orders->new UserOrder(email, orders))
    .exceptionally(e->UserOrder.FAIL);
}
----
promise랑 거의 동일한 방식

=== 비동기/논블록킹 API호출 - Async/Await
[source,java]
----
public CompletableFuture<UserOrder> asyncOrders3(String email) {
  try {
    var user = await(asyncFindUser2(email));
    var orders = await(asyncGetOrders2(user));
    return completedFuture(new UserOrder(email, orders));
  }
  catch (Exception e) {
    return completedFuture(UserOrder.FAIL);
  }
}
----

=== 비동기/논블록킹 API 호출 - Reactor Flux/Mono
[source,java]
----
public Mono<UserOrder> asyncOrders4(String email) {
  return asyncFindUser4(email)
    .flatMap(user->asyncGetOrders4(user))
    .map(orders->new UserOrder(email, orders))
    .onErrorReturn(UserOrder.FAIL);
}
----

WebClient 이용. CompletableFuture와 유사해 보이지만...

Mono<T>(0, 1)
Flux<T>(0 ... n)

=== CompletableFuture vs Reactor Flux/Mono
* 공통점
** 람다식을 사용하는 함수형 스타일
** 비동기와 비동기 작업의 조합(componse, flatMap)
** 비동기와 동기 작업의 적용(apply, map)
** Exceptional 프로그래밍
** 작업별 쓰레드 풀 지정 가능
* Flux/Mono 방식의 장점
** 데이터 스트림(Flux) <-> List/Collection
** 강력한 연산자 제공
** 지연 실행, 병합, 분산, 시간 제어
** 유연한 스케줄러
** ReactiveStreams, 자바9+ 표준
** 다양한 지원 라이브러리, 서비스, 서버

== 스프링5 웹플럭스와 테스트 리액티브 API의 데이터 시퀀스 검증

image::file6.png[]

image::file7.png[]

image::file8.png[]

=== Flux/Mono를 반환하는 리액티브 API 테스트
* 비동기 코드를 검증하는 "동기방식" 테스트
* 비동기/논블록킹의 특성에 주의
* 블록킹/동기화가 필요

=== subscribe() + assert
[source,java]
----
@Test
void mono() {
  Mono<Integer> mono = Mono.just(1)
    .subscribeOn(Schedulers.single());
  mono.subscribe(item->assertThat(item).isEqualTo(1));
}
----
심각한 문제점이 있음. 테스트 성공함.
mono.subscribe(item->assertThat(item).isEqualTo(2));
로 고쳐도 성공함.

논블록킹이기 때문에 선언하고 나면 테스트 끝나버림.

메인쓰레드를 웨이팅 시켜야됨.

image::file9.png[]

image::file10.png[]

=== block() + assert!
[source,java]
----
@Test
void mono5() throws InterruptedException {
  Mono<Integer> mono = Mono.just(1)
    .subscribeOn(Schedulers.single());
  Integer item = mono.block(); // 데이터 스트림이 종료될 때까지 대기
  assertThat(item).isEqualTo(1);
}
----

=== subscribe(), block() 테스트의 단점, 한계
* 동기화/블록킹이 필요
* Flux를 검증하려면 코드가 매우 복잡해짐
* 시간과 간격에 대한 검증이 어려움

=== StepVerifier
* 비동기 논블록킹으로 동작하는 코드 테스트 툴
* 데이터 스트림의 검증
* 예외, 완료도 검증
* 가상시간을 이용해 오랜 시간의 이벤트 테스트

[source,java]
----
@Test
void stepVerifier() {
  Mono<Integer> mono = Mono.just(1)
    .subscribeOn(Schedulers.single()); // Flux/Mono
  StepVerifier.create(mono) // 동작을 검증. StepVerifier 생성
    .expectNext(2) // 첫번째 데이터 아이템 값
    .verifyComplete(); // 스트림 완료
}
----

[source,java]
----
@Test
void stepVerifier2() {
    var flux = Flux.just(1, 2, 3)
            .concatWith(Mono.error(new RuntimeException()))
            .subscribeOn(Schedulers.single()); // 3데이터 + 에러발생 스트럼

    StepVerifier.create(flux)
            .expectNext(1) // 첫번째 데이터 1
            .expectNext(2)
            .expectNext(3)
            .expectError(RuntimeException.class) // 에러나고 종료
            .verify();
}
----

== 스프링5웹플럭스와 테스트
원격 리액티브 API 호출 테스트

=== 리액티브 HTTP API 호출 테스트
* RestTemplate
** 동기/블록킹
* AsyncRestTemplate
** 비동기/논블록킹
** Future - 콜백, CompletionStage
* WebClient
** 비동기/논블록킹
** Flux/Mono 요청, 응답
** Streaming 지원
** BackPressure 지원

=== WebClient
[source,java]
----
@GetMapping("/api")
public Mono<String> helloApi() {
    return client.get()
            .uri("/api/hello") // 원격 API 요청 준비
            .retrieve()
            .onStatus(HttpStatus::is4xxClientError, // 응답 HTTP 상태 코드 처리
                    res->Mono.error(new IllegalArgumentException()))
            .onStatus(HttpStatus::is5xxServerError,
                    res->Mono.error(new RuntimeException()))
            .bodyToMono(String.class) // API 응답 body 변환
            .map(body->body.toUpperCase()) // 결과에 비즈니스 로직 적용
            .switchIfEmpty(Mono.just("Empty")); // 예외적인 결과 대응
}
----
작성하기 매우 편리함
웹 플럭스 첫걸음은 WebClient로부터

=== WebClient - Streaming
[source,java]
----
@GetMapping(value="/api2", produces = "text/event-stream")
public Flux<String> helloStream() {
    return client.get()
            .uri("/stream")
            .accept(MediaType.APPLICATION_STREAM_JSON)
            .exchange()
            .flatMapMany(res->res.bodyToFlux(User.class))
            .filter(user->user.getId() > 1)
            .map(user->user.toString());
}
----
HTTP 스트리밍 API 요청도 간단

=== 원격 리액티브 API 호출 - 러닝서버 통합테스트
image::file11.png[]

=== 원격 리액티브 API 호출 - 단위 테스트
image::file12.png[]

=== 원격 리액티브 API 호출 - 단위 테스트
image::file13.png[]

=== 원격 리액티브 API 호출 - 통합테스트 (feat. MockServer)
image::file14.png[]

=== 리액티브 HTTP API 통합테스트 - MockWebServer
com.squareup.okhttp3:mockwebserver

[source,java]
----
private MockWebServer server;
private WebClient webClient;

@Before
public void setup() {
  var connector = new ReactorClientHttpConnector();
  this.server = new MockWebServer();
  this.webClient = WebClient
    .builder()
    .clientConnector(connector)
    .baseUrl(this.server.url("/").toString())
    .build();
}
----
WebClientIntegrationTests 유용한 샘플

=== 리액티브 HTTP API 통합테스트 - MockWebServer
[source,java]
----
@Test
public void shouldReceiveResponseHeaders() {
    prepareResponse(response -> response
    .setHeader("Content-Type", "text/plain")
    .setBody("Hello Spring!")); // MockWebServer의 응답 준비

    Mono<HttpHeaders> result = this.webClient.get()
            .uri("/greeting?name=Spring").exchange()
            .map(response -> response.headers().asHttpHeaders());

    StepVerifier.create(result).consumeNextWith(
            httpHeaders -> {
                assertThat(httpHeaders.getContentType()).isEqualTo(MediaType.TEXT_PLAIN);
                assertThat(httpHeaders.getContentLength()).isEqualTo(13L); })
            .expectComplete().verify(Duration.ofSeconds(3));

    expectRequestCount(1); // MockWebServer 검증
    expectRequest(request -> {
        assertThat(request.getHeader(HttpHeaders.ACCEPT)).isEqualTo("*/*");
        assertThat(request.getPath()).isEqualTo("/greeting?name=Spring");
    });
}
----

=== 리액티브 HTTP API 호출 코드 테스트 개선
* 원격 호출 구간의 분리

[source,java]
----
@GetMapping("/api")
public Mono<String> helloApi() {
    return client.get() // WebClient 호출. 일반 Mono/Flux 코드
        .uri("/api/hello")
        .retrieve()
        .onStatus(HttpStatus::is4xxClientError, // 응답 HTTP 상태 코드 처리
                res->Mono.error(new IllegalArgumentException()))
        .onStatus(HttpStatus::is5xxServerError,
                res->Mono.error(new RuntimeException()))
        .bodyToMono(String.class)
        .map(body->body.toUpperCase())
        .switchIfEmpty(Mono.just("Empty"));
}
----

=== 리액티브 HTTP API 호출 코드 테스트
[source,java]
----
interface HelloService {
  Mono<String> hello();
}

@Component
public class RemoteHelloService implements HelloService {
  public Mono<String> hello() {
    return client.get()
      .uri("/hello")
      .retrieve()
      .onStatus(HttpStatus::is4xxClientError,
        res->Mono.error(new IllegalArgumentException()))
      .onStatus(HttpStatus::is5xxServerError,
         res->Mono.error(new RuntimeException()))
      .bodyToMono(String.class)
  }
}
----

[source,java]
----
@Autowired HelloService helloService; // Mock 서비스로 대체 가능

@GetMapping("/api")
public Mono<String> helloApi() { // 단순한 리액티브 API를 이용하는 코드
  return this.helloService.hello()
    .map(body -> body.toUppserCase())
    .switchIfEmpty(Mono.just("Empty"))
    .doOnError(c->c.printStackTrace());
}
----

== 스프링5웹 플럭스와 테스트
구성 가능한 논블록킹 프레임워크

=== 웹 플럭스의 새로운 아키텍처
* 기존 MVC는 서블릿 스펙과 서버의 제약 위에 개발
** 프론트 컨트롤러 패턴, MVC 패턴, 전략 패턴
* 웹 플럭스는 독자적인 아키텍처를 가지는 프레임워크
** 서블릿(3.1+) 컨테이너를 사용할 수 있으나 의존적이지 않음
** Netty, Undertow 서버 지원
** 논블록킹 네트워크/논블록킹 API
** 논블록킹 데이터 스트림
** 서버/기술 의존적이지 않은 프레임워크 재구성 손쉬움
** 함수형 엔드포인트
** 뛰어난 테스트 편의성!!

=== 웹 플럭스의 새로운 아키텍처 - 전체 구조
image::file15.png[]

=== 웹 플럭스의 새로운 아키텍처 - @EnableWebFlux
image::file16.png[]

=== 웹 플럭스의 새로운 아키텍처 - Functional Endpoint
image::file17.png[]

앞으로 요렇게 갈 듯

=== 웹 플럭스의 새로운 아키텍처 - DH + Functional
image::file18.png[]

=== HttpHandler
* 리액티브 HTTP 요청을 처리하는 가장 low-level API
* 논블록킹 HTTP 서버에 연결되는 어댑터를 통해 연결

[source,java]
----
public interface HttpHandler {
  Mono<Void> handle(ServerHttpRequest requst, ServerHttpResponse response);
}
----

=== WebHandler API
* 리액티브 웹 요청을 처리하는 high-level API
* 프론트 컨트롤러를 구성하는 기본 인터페이스
* DispatcherHandler

[source,java]
----
public interface WebHandler {
  Mono<Void> handle(ServerWebExchange exchange);
}
----

=== Functional Endpoint
[source,java]
----
PersonRepostiroy repository = ...
PersonHandler handler = new PersonHandler(repository);

RouterFunction<ServerReponse> route =
  route(GET("/person/{id}").and(accept(APPLICATION_JSON)), handler::getPerson)
    .andRoute(GET("/person").and(accept(APPLICATION_JSON)), handler::listPeople)
    .andRoute(POST("/person"), handler::createPerson);
// 웹 요청을 담당할 함수 핸들러를 찾음

public class PersonHandler {
  public Mono<ServerResponse> listPeople(ServerRequest request) { ... }
  public Mono<ServerResponse> createPerson(ServerRequest request) { ... }
  public Mono<ServerResponse> getPerson(ServerRequest request) { ... }

// ServerRequest->ServerResponse로 변환하는 리액티브 핸들러
}
----

웹 요청을 처리하고 응답을 만드는 순수한 함수의 모음

=== Functional Endpoint - Micro Web Framework
[source,java]
----
HttpServer.create().host("localhost").handle(
  new ReactorHttpHandlerAdaptor(toHttpHandler(
    route(path("/hello"),
    req->ok().body(fromObject("Hello Functional")))))
  ).bind().block();
----
스프링 컨테이너도 필요없음

== 스프링5웹 플럭스와 테스트
리액티브 API 서비스 테스트
TestWebClient

=== 웹 플럭스 API 서비스 테스트
* TestWebClient
** 테스트 대상 구성이 가능한 리액티브 HTTP (Mock) 테스트 도구
** WebClient와 동일한 방식
** SpringBoot - @WebFluxText
* 테스트 대상 구성 방법
** bindToServer
** bindToApplicationContext
** bindToController
** bindToRouterFunction
** bindToWebHandler

=== 리액티브 API 서비스 테스트 - MockServer 테스트
image::file19.png[]

=== TestWebClient - @WebFluxTest
* SpringBoot2 애플리케이션의 Mock Test
** bindToApplicationContext 이용

[source,java]
----
@RunWith(SpringRunner.class)
@WebFluxTest
public class WebClientBootTest {
    @Autowired WebTestClient webTestClient; // SpringBoot앱을 MockServer에 배포. 테스트에 사용할 WebTestClient 생성

    @Test
    public void hello() {
        webTestClient.get().uri("/hello/{name}", "Spring")
                .exchange() // WebClient 처럼 API 호출하고
                .expectStatus().isOk() // API 호출 결과 검증
                .expectBody(String.class)
                .isEqualTo("Hello Spring");
    }
}
----

=== 리액티브 API 서비스 테스트 - 러닝 서버 테스트
image::file20.png[]

=== TestWebClient - bindToServer
* ReactorNetty를 통해서 실제 동작하는 서버에 연결해서 테스트
[source,java]
----
var client = WebTestClient.bindToServer().baseUrl("http://localhost:8080").build();

client.get().uri("/hello/{name}", "Spring")
  .exchange()
  .expectStatus().isOk()
  .expectBody(String.class).isEqualTo("Hello");
----

=== TestWebClient - bindToApplicationContext
* WebHttpHandlerBuilder가 이용할 수 있는 WebHandler API 구성을 가진 ApplicationContext를 이용
[source,java]
----
var context = new AnnotationConfigApplicationContext(MyConfiguration.class);

WebTestClient client = WebTestClient.bindToApplicationContext(context).build();

client.get().uri("/hello/{name}", "Spring")
  .exchange()
  .expectStatus()
  .isOk()
  .expectBody(String.class)
  .isEqualTo("Hello Spring");
----

=== TestWebClient - bindToController
* WebHttpHandlerBuilder가 이용할 수 있는 WebHandler API 구성을 가진 ApplicationContext를 이용

[source,java]
----
WebTestClient client = WebTestClient.bindToController(
  new MyController(), new HelloApi()
).build(); // 특정 컨트롤러/핸들러만으로 테스트 대상 구성

client.get().uri("/hello/{name}", "Spring")
  .exchange()
  .expectStatus()
  .isOk()
  .expectBody(String.class)
  .isEqualTo("Hello Spring");
----
컨트롤러 100개 모두 테스트? 2개만 하도록


=== TestWebClient - bindToRouterFunction
* 함수형 엔드포인트에 대한 테스트
[source,java]
----
Mono<ServerResponse> handler(ServerRequest request) {
  return ServerResponse.ok().body(Mono.just("hello"), String.class);
}

@Test
void routerFunction() {
  RouterFunction<ServerResponse> route = route(GET("/rf"), this::handler);

  WebTestClient client = WebTestClient.bindToRouterFunction(route)
    .build();

  client.get().uri("/rf")
    .exchange()
    .expectStatus().isOk()
    .expectBody(String.class)
    .isEqualTo("hello");
}
----

== 스프링5웹 플럭스와 테스트
함수형 엔드포인트 테스트

=== 함수형 엔드포인트 테스트 방법
* bindToRouterFunction
* @WebFluxTest
** DispatcherHandler와 RouterFunctionMapping
* 함수 단위 테스트
** 본격적인 함수형 스타일 웹 프로그래밍
** 조합가능한 마이크로 프레임워크
** 작고 가벼운 비동기 논블록킹 웹

기존 MVC에서 WebClient 써보시고... 하나씩...

