= JavaBean

* 인자가 없는 public 생성자가 있어야 된다.
* getter setter 가 있어야 한다.
* Serializable 인터페이스를 구현해야 한다.
** 왜?

== What is a Bean?
출처: spec 1.01 문서

"Java Bean은 빌더 툴에서 시각적으로 조작 할 수 있는 재사용 가능한 소프트웨어 컴포넌트입니다."

[source]
----
2 Fundamentals
2.1 What is a Bean?
Let's start with an initial definition and then refine it:
“A Java Bean is a reusable software component that can be manipulated visually in a builder tool.”
This covers a wide range of different possibilities.
The builder tools may include web page builders, visual application builders, GUI layout builders, or even server application builders. Sometimes the “builder tool” may simply be a document editor that is including some beans as part of a compound document.
Some Java Beans may be simple GUI elements such as buttons and sliders. Other Java Beans may be sophisticated visual software components such as database viewers, or data feeds.
Some Java Beans may have no GUI appearance of their own, but may still be composed together visually using an application builder.
Some builder tools may operate entirely visually, allowing the direct plugging together of Java Beans. Other builders may enable users to conveniently write Java classes that interact with and control a set of beans. Other builders may provide a simple scripting language to allow easy high-level scripting of a set of beans.
Individual Java Beans will vary in the functionality they support, but the typical unifying features that distinguish a Java Bean are:
• Support for “introspection” so that a builder tool can analyze how a bean works
• Support for “customization” so that when using an application builder a user can customize the appearance and behaviour of a bean.
• Support for “events” as a simple communication metaphor than can be used to connect up beans.
• Support for “properties”, both for customization and for programmatic use.
• Support for persistence, so that a bean can be customized in an application builder and then have its customized state saved away and reloaded later.
A bean is not required to inherit from any particular base class or interface. Visible beans must inherit from java.awt.Component so that they can be added to visual containers, but invisible beans (see 2.7 below) aren’t required to do this.
Note that while beans are primarily targeted at builder tools they are also entirely usable by human programmers. All the key APIs such as events, properties, and persistence, have been designed to work well both for human programmers and for builder tools.
Many beans will have a strong visual aspect, in both the application builder and in the final constructed application, but while this is common it is not required.

2.1.1 Beans v. Class Libraries
Not all useful software modules should necessarily turn into beans. Beans are appropriate for software components that can be visually manipulated and customized to achieve some effect.
Class libraries are an appropriate way of providing functionality that is useful to programmers, but which doesn't benefit from visual manipulation.
So for example it makes sense to provide the JDBC database access API as a class library rather than as a bean, because JDBC is essentially a programmatic API and not something that can be directly presented for visual manipulation. However it does make sense to write database access beans on top of JDBC. So for example you might write a “select” bean that at customization time helped a user to compose a select statement, and then when the application is run uses JDBC to run the select statement and display the results.
----

== JavaBeans, Spring Beans, EJB (Enterprise JavaBeans)

=== JavaBeans
* have public default (no argument) constructors
* allow access to their properties using accessor (getter and setter) methods
* implement java.io.Serializable

=== Spring Beans
A Spring bean is basically an object managed by Spring. More specifically, it is an object that is instantiated, configured and otherwise managed by a Spring Framework container. Spring beans are defined in Spring configuration files (or, more recently, with annotations), instantiated by Spring containers, and then injected into applications.

=== Enterprise javaBeans

=== References
https://stackoverflow.com/questions/21866571/difference-between-javabean-and-spring-bean#:~:text=All%20properties%20in%20java%20bean,by%20the%20Spring%20IoC%20container%20.&text=Spring%20Bean%3A,part%20of%20a%20spring%20application.

http://www.shaunabram.com/beans-vs-pojos/[JavaBeans vs Spring beans vs POJOs]



== References
https://docs.oracle.com/javase/tutorial/javabeans/writing/index.html[Lesson: Writing JavaBeans Components]

https://www.oracle.com/java/technologies/javase/javabeans-spec.html

https://docs.oracle.com/javase/6/docs/api/java/beans/package-summary.html

https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EB%B9%88%EC%A6%88[자바빈즈]

https://en.wikipedia.org/wiki/JavaBeans[JavaBeans]



https://www.youtube.com/watch?v=6JZs8zJsyJE[Introduction to JavaBeans]
A JavaBean
A JavaBean is an ordinary Java class that conforms to the following rules:
1. A JavaBean must have a public, no-argument constructor (a default constructor).
2. The JavaBean class attributes must be accessed via accessor and mutator methods that follow a standard naming convention (getXxxx and setXxxx, isXxxx for boolean attributes).
3. The JavaBean class should implement the Serializable interface.

Why Use Javabeans
Can be more user-friendly and less intimidating for non-Java Web Designers who work with a JSP.
Using JavaBeans rather than Java Scriptlets in your JSPs allows better separation of the view logic from the business logic.

Java in a JSP
* Java Scriptlets
* Include Statements
* JavaBeans

[source,java]
----
public class EmployeeBean implements Serializable {
    private String firstName;
    private String lastName;
    private int startYear;
    private double payRate;

    public EmployeeBean() {
    }

    public EmployeeBean(String firstName, String lastName, int startYear, double payRate) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.startYear = startYear;
        this.payRate = payRate;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int getStartYear() {
        return startYear;
    }

    public void setStartYear(int startYear) {
        this.startYear = startYear;
    }

    public double getPayRate() {
        return payRate;
    }

    public void setPayRate(double payRate) {
        this.payRate = payRate;
    }
}
----

https://en.wikipedia.org/wiki/Enterprise_JavaBeans[Enterprise JavaBeans]
와 다른 것이니 헷갈리면 안됨
