= Brunch - Reactive Spring

Eddy.Kim의 메거진 https://brunch.co.kr/@springboot 의 내용을 공부 하면서 정리합니다.

== 1. 리액티브 프로그래밍

* https://brunch.co.kr/@springboot/152[Project Reactor 1.리액티브 프로그래밍 2019.02.06]

Pivotal에서는 오래전부터 리액티브 프로그래밍을 준비하고 있었음. 프로젝트 이름은 Reactor. Reactor는 Reactive Streams의 구현체. 스피링5 리액티브 프로그래밍의 핵심 라이브러리. Reactor를 먼저 이해하고 Webflux를 도입해야 한다.

=== 1.1 Reactive(리액티브)
리액티브라는 용어는 3가지 의미로 주로 사용됨.
* Reactive Systems (architecture and design)
* Reactive Programming (declarative event-based)
* Functional Reactive Programming (FRP)

자주 사용되는 단어 streaming, lightweight, real-time

뉴욕의 프로그래머에서는
"사용자가 해당 소프트웨얼르 사용하기 위해서 어떤 입력을 발생시켰을 때 꾸물거리지 않고 최대한 빠른 시간 내에 응답을 한다는 의미다."

MS엑셀의 스프레드시트. 특정 셀의 데이터를 변경하게 되면 해당 셀과 관련된 모든 셀들이 동시에 변경.

=== 1.2. 리액티브 선언문

리액티브의 4가지 속성
* 응답성(responsive)
* 탄력성(resilient)
* 유연성(elastic)
* 메시지 주도(message driven)

https://www.reactivemanifesto.org/ko[리액티브 선언문]

==== 응답성(responsive)

==== 탄력성(Resilient)

==== 유연성(Elastic)

==== 메시지 기반(Message Driven)

=== 1.3 리액티브 프로그래밍 vs 리액티브 시스템

=== 1.4 JDK 환경에서의 리액티브 프로그래밍
* RxJava
* Project Reactor
* Spring Framework 5.0
* Ratpack
* Akka

=== 1.5 정리
필자는 작년에 "스프링 리캡 데이"라는 세미나에서 스프링 웹 플럭스에 대해서 강연을 들었음.



* [Project Reactor 3. 리액티브 스트림 2019.02.06](https://brunch.co.kr/@springboot/153)

== 2. Async VS Non-Blocking
https://brunch.co.kr/@springboot/158[Reactor 2.Async & Non-Blocking]

바리스타가 커피를 만드는 과정으로 설명

리액티브 스트림 구현체
* RxJava
* Reactor


== 3. Reactive Streams
https://brunch.co.kr/@springboot/153[Project Reactor 3. 리액티브 스트림]

2013년 Netflix, Pivotal, Typesafe의 개발자들이 발의해서 처음 만들어졌음. 리액티브 프로그래밍을 위한 명세(specification)이다.

=== Publisher
* subscribe

Flux, Mono는 Publisher의 구현체


=== Subscriber
* onSubscribe
* onNext
* onError
* onComplete

=== Subscription
* request
* cancel


== 4. Project Reactor Flux, Mono
* https://brunch.co.kr/@springboot/154[Project Reactor 4. Flux, Mono 2019.02.16]

reactor 3는 Java 8 이상

스프링 webflux 환경인 경우 reactor-core가 포함되어 있음.

Flux, Mono는 Publisher의 구현체.

* Flux: 0-N개의 데이터 전달
* Mono: 0-1 개의 데이터 전달

=== 4.2 Publisher 구현체, Flux와 Mono
==== 0-N개의 데이터를 전달하는 Flux
이벤트
* onNext: 하나의 데이터를 전달할 때마다 발생
* onComplete: 모든 데이터의 전달 처리가 완료 되면 발생
* onError: 데이터를 전달하는 과정에서 오류가 발생 하면 발생

==== 0-1개의 데이터를 전달하는 Mono

=== 4.3 Flux를 생성하는 방법
* just
* range
* fromArray, fromIterable, fromStream
* empty

==== just


== 5. Project Reactor Subscriber

== 6. Project Reactor Data Processing

== 7. Project Reactor Create, Generator

== 8. 미정
